#!/usr/bin/env python3
#
# References:
# - https://github.com/virt-manager/virt-manager/blob/master/virtManager/viewers.py
# - http://lazka.github.io/pgi-docs/#SpiceClientGLib-2.0
import argparse
import logging

from gi.repository import GLib
from gi.repository import GObject

import gi
gi.require_version('SpiceClientGLib', '2.0')
from gi.repository import SpiceClientGLib

class SpiceRecorder(GObject.GObject):
    def __init__(self):
        GObject.GObject.__init__(self)

        self._spice_session = None
        self._display = None
        self._main_channel = None
        self._main_channel_hids = []
        self._display_channel = None

    def _create_spice_session(self):
        self._spice_session = SpiceClientGLib.Session(read_only=True)
        SpiceClientGLib.set_session_option(self._spice_session)

        GObject.GObject.connect(self._spice_session, "channel-new",
                                self._channel_new_cb)

    def _channel_new_cb(self, session, channel):
        print("New channel callback:", channel)

        if type(channel) == SpiceClientGLib.MainChannel and not self._main_channel:
            self._main_channel = channel

            hid = self._main_channel.connect_after("channel-event",
                                        self._main_channel_event_cb)
            self._main_channel_hids.append(hid)

        elif type(channel) == SpiceClientGLib.DisplayChannel and not self._display_channel:
            channel_id = channel.get_property("channel-id")
            if channel_id != 0:
                logging.debug("Spice multi-head unsupported")
                return

            self._display_channel = channel

            hid = self._display_channel.connect_after("display-invalidate",
                                           self._display_invalidate_cb)
            hid = self._display_channel.connect_after("display-mark",
                                           self._display_mark_cb)
            hid = self._display_channel.connect_after("display-primary-create",
                                           self._display_primary_create_cb)
            hid = self._display_channel.connect_after("display-primary-destroy",
                                           self._display_primary_destroy_cb)
            hid = self._display_channel.connect_after("gl-draw",
                                           self._display_gl_draw_cb)
    def _main_channel_event_cb(self, channel, event):
        logging.debug("Main channel %s event %s", channel, event)

    def _display_invalidate_cb(self, channel, x, y, width, height):
        logging.debug("display-invalidate channel %s", channel)

    def _display_mark_cb(self, channel, mark):
        logging.debug("display-mark channel %s", channel)

    def _display_primary_create_cb(self, channel, format, width, height, stride, shmid, imgdata):
        logging.debug("display-primary-create channel %s", channel)

    def _display_primary_destroy_cb(self, channel):
        logging.debug("display-primary-destroy channel %s", channel)

    def _display_gl_draw_cb(self, channel, x, y, width, height):
        logging.debug("gl-draw channel %s", channel)

    def open_host(self, host='localhost', port=5900, tlsport=None):
        self._create_spice_session()

        logging.debug("Spice connecting to host=%s port=%s tlsport=%s",
            host, port, tlsport)
        self._spice_session.set_property("host", str(host))
        if port:
            self._spice_session.set_property("port", str(port))
        if tlsport:
            self._spice_session.set_property("tls-port", str(tlsport))

        self._spice_session.connect()


def main():
    logging.basicConfig(level=logging.DEBUG)

    sp = SpiceRecorder()
    sp.open_host()

    loop = GLib.MainLoop()
    loop.run()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Exiting due to Ctrl+C")
