#!/usr/bin/env python3
#
# References:
# - https://github.com/virt-manager/virt-manager/blob/master/virtManager/viewers.py
# - http://lazka.github.io/pgi-docs/#SpiceClientGLib-2.0
# - spice-gtk/src/spicy-screenshot.c
# - https://linuxtv.org/downloads/v4l-dvb-apis/uapi/v4l/pixfmt-packed-rgb.html
# - http://zulko.github.io/blog/2013/09/27/read-and-write-video-frames-in-python-using-ffmpeg/
# - https://msdn.microsoft.com/en-us/library/windows/desktop/aa473780.aspx
import argparse
import logging
import time
import ctypes
from enum import Enum
import tempfile
import subprocess

from gi.repository import GLib
from gi.repository import GObject

import gi
gi.require_version('SpiceClientGLib', '2.0')
from gi.repository import SpiceClientGLib

class SpiceSurfaceFmt(Enum):
    # spice-1/spice/enums.h
    SPICE_SURFACE_FMT_INVALID = 0
    SPICE_SURFACE_FMT_1_A = 1
    SPICE_SURFACE_FMT_8_A = 8
    SPICE_SURFACE_FMT_16_555 = 16
    SPICE_SURFACE_FMT_32_xRGB = 32
    SPICE_SURFACE_FMT_16_565 = 80
    SPICE_SURFACE_FMT_32_ARGB = 96


class Display(GObject.GObject):
    def __init__(self, channel, width, height, stride, shmid, imgdata):
        self.channel = channel
        self.width   = width
        self.height  = height
        self.stride  = stride
        self.shmid   = shmid
        print(">>>>>>>> imgdata = 0x{0:X}".format(imgdata))
        self.imgdata = ctypes.cast(imgdata, ctypes.POINTER(ctypes.c_ubyte * width * height))

    @staticmethod
    def get_format_class(format):
        return {
            SpiceSurfaceFmt.SPICE_SURFACE_FMT_32_xRGB:  Display32RGB,
            SpiceSurfaceFmt.SPICE_SURFACE_FMT_16_555:   Display16555
        }[format]

    def __repr__(self):
        return '{}(channel={}, width={}, height={}, stride={}, shmid={}, imgdata={})'.format(
                type(self), self.channel, self.width, self.height, self.stride, self.shmid, self.imgdata)

class Display32RGB(Display):
    fmtstr = '32 xRGB'

    def write_frame(self, f):
        wrote = f.write(self.imgdata.contents)
        print("wrote {} bytes".format(wrote))
        return True


class Display16555(Display):
    fmtstr = '16 555'



class SpiceRecorder(GObject.GObject):
    __gsignals__ = {
        "connected":        (GObject.SignalFlags.RUN_FIRST, None, []),
    }
    def __init__(self, outfile, framerate=24):
        GObject.GObject.__init__(self)

        self.outfile = outfile
        self.framerate = framerate

        self._spice_session = None
        self._display = None
        self._main_channel = None
        self._main_channel_hids = []
        self._display_channel = None

        self._last_frame_t = None

    def _create_spice_session(self):
        self._spice_session = SpiceClientGLib.Session(read_only=True)
        SpiceClientGLib.set_session_option(self._spice_session)

        GObject.GObject.connect(self._spice_session, "channel-new",
                                self._channel_new_cb)

    def _channel_new_cb(self, session, channel):
        print("New channel callback:", channel)

        if type(channel) == SpiceClientGLib.MainChannel and not self._main_channel:
            self._main_channel = channel

            hid = self._main_channel.connect_after("channel-event",
                                        self._main_channel_event_cb)
            self._main_channel_hids.append(hid)

        elif type(channel) == SpiceClientGLib.DisplayChannel and not self._display_channel:
            channel_id = channel.get_property("channel-id")
            if channel_id != 0:
                logging.debug("Spice multi-head unsupported")
                return

            self._display_channel = channel

            # See spice-gtk/src/spice-widget.c:channel_new()
            hid = self._display_channel.connect_after("display-invalidate",
                                           self._display_invalidate_cb)
            hid = self._display_channel.connect_after("display-mark",
                                           self._display_mark_cb)
            hid = self._display_channel.connect_after("display-primary-create",
                                           self._display_primary_create_cb)
            hid = self._display_channel.connect_after("display-primary-destroy",
                                           self._display_primary_destroy_cb)
            hid = self._display_channel.connect_after("gl-draw",
                                           self._display_gl_draw_cb)

            channel.connect()
            self.emit("connected")



    def _main_channel_event_cb(self, channel, event):
        logging.debug("Main channel %s event %s", channel, event)

    def _display_invalidate_cb(self, channel, x, y, width, height):
        logging.debug("display-invalidate channel=%s x=%d y=%d width=%d height=%d",
                channel, x, y, width, height)

    def _display_mark_cb(self, channel, mark):
        logging.debug("display-mark channel %s", channel)

    def _display_primary_create_cb(self, channel, format, width, height, stride, shmid, imgdata):
        format = SpiceSurfaceFmt(format)
        logging.debug("display-primary-create channel=%s format=%s", channel, format)
        assert not self._display
        self._display = Display.get_format_class(format)(channel, width, height, stride, shmid, imgdata)
        print(self._display)

        GLib.timeout_add(int(1000 / self.framerate), self._record_frame)


    def _display_primary_destroy_cb(self, channel):
        logging.debug("display-primary-destroy channel %s", channel)

    def _display_gl_draw_cb(self, channel, x, y, width, height):
        logging.debug("gl-draw channel %s", channel)

    def _record_frame(self):
        now = time.time()
        if self._last_frame_t:
            dt = now - self._last_frame_t
            err = dt - (1 / self.framerate)
            print("_record_frame() dt={} (err={})".format(dt, err))
        else:
            print("_record_frame() first frame")
        self._last_frame_t = now


        self._display.write_frame(self.outfile)
        return True

    def get_resolution(self):
        if not self._display_channel:
            return None
        return self._display_channel.get_properties("width", "height")

    def open_host(self, host='localhost', port=5900, tlsport=None):
        self._create_spice_session()

        logging.debug("Spice connecting to host=%s port=%s tlsport=%s",
            host, port, tlsport)
        self._spice_session.set_property("host", str(host))
        if port:
            self._spice_session.set_property("port", str(port))
        if tlsport:
            self._spice_session.set_property("tls-port", str(tlsport))

        self._spice_session.connect()


def parse_args():
    ap = argparse.ArgumentParser()
    ap.add_argument('output')
    ap.add_argument('-r', '--framerate', type=int, default=24)
    return ap.parse_args()


def convert_raw(input_path, output_path, w, h, framerate):
    args = [
        'ffmpeg',
        '-y',
        '-f', 'rawvideo',
        '-vcodec', 'rawvideo',
        '-s', '{}x{}'.format(w, h),
        '-pix_fmt', 'bgr0',
        '-r', str(framerate),
        '-i', input_path,
        '-an',
        '-vcodec', 'libx264',
        output_path,
    ]
    print("Invoking FFMPEG:", args)
    subprocess.check_call(args)


def main():
    logging.basicConfig(level=logging.DEBUG)

    args = parse_args()

    def connected(ignore):
        w, h = sp.get_resolution()
        print("Connected! {}x{}".format(w,h))


    # Record
    with tempfile.NamedTemporaryFile('wb', prefix='spice-record-', suffix='.raw', delete=False) as rawf:
        sp = SpiceRecorder(rawf, framerate=args.framerate)
        sp.open_host()
        sp.connect("connected", connected)

        loop = GLib.MainLoop()

        print("Press Ctrl+C to stop")
        try:
            loop.run()
        except KeyboardInterrupt:
            pass

    # Convert video
    w, h = sp.get_resolution()
    convert_raw(rawf.name, args.output, w, h, args.framerate)




if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Exiting due to Ctrl+C")
